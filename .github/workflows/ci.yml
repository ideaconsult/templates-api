---
name: CI

permissions:
  contents: read
  pull-requests: write

on:  # yamllint disable-line rule:truthy
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
    types:
      - opened
      - reopened
      - synchronize
      - ready_for_review
  workflow_dispatch:

env:
  IMAGE_NAME: ${{ github.repository }}
  PY_DEFAULT: '3.13'
  REGISTRY: 'ghcr.io'
  UV_VERSION: '0.7.12'


jobs:

  test:

    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version:
          - '3.10'
          - '3.11'
          - '3.12'
          - '3.13'

    steps:

      - name: Checkout the repository
        uses: actions/checkout@v4.2.2

      - name: Mask existing system Python
        run: sudo rm -r /usr/bin/python*

      - name: Setup Python
        uses: actions/setup-python@v5.6.0
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install uv
        uses: astral-sh/setup-uv@v6.1.0
        with:
          cache-dependency-glob: 'uv.lock'
          enable-cache: true
          python-version: ${{ matrix.python-version }}
          version: ${{ env.UV_VERSION }}

      - name: Install the project
        run: uv sync --locked --all-extras --dev

      - name: Run pre-commit
        run: >-
          if [[ $GITHUB_REF == refs/heads/main ]]; then
            SKIP=no-commit-to-branch uv run pre-commit run --all-files
          else
            uv run pre-commit run --all-files
          fi

      - name: Run tests
        env:
          COVERAGE_FILE: .coverage.${{ matrix.python-version }}
        run: uv run pytest --cov

      - name: Store the coverage report
        uses: actions/upload-artifact@v4.6.2
        with:
          include-hidden-files: true
          name: coverage-${{ matrix.python-version }}
          path: .coverage.${{ matrix.python-version }}

  coverage:

    runs-on: ubuntu-latest
    needs: test
    permissions:
      contents: write
      pull-requests: write

    steps:

      - name: Checkout the repository
        uses: actions/checkout@v4.2.2
        with:
          # https://github.com/py-cov-action/python-coverage-comment-action/commit/2e8dc23
          fetch-depth: 1000

      - name: Retrieve the coverage reports
        id: download
        uses: actions/download-artifact@v4.3.0
        with:
          pattern: coverage-*
          merge-multiple: true

      - name: Process the coverage reports
        id: coverage_processing
        uses: py-cov-action/python-coverage-comment-action@v3.33
        with:
          COVERAGE_DATA_BRANCH: 'COVERAGE-REPORT'
          GITHUB_TOKEN: ${{ github.token }}
          MERGE_COVERAGE_FILES: true

      - name: Store the pull request coverage comment for later posting
        if: steps.coverage_processing.outputs.COMMENT_FILE_WRITTEN == 'true'
        uses: actions/upload-artifact@v4.6.2
        with:
          name: python-coverage-comment-action
          path: python-coverage-comment-action.txt

  build:

    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    needs: test
    permissions:
      packages: write
      # This is used to complete the identity challenge
      # with sigstore/fulcio when running outside of PRs.
      id-token: write

    steps:

      - name: Checkout repository
        uses: actions/checkout@v4.2.2

      # Install the cosign tool except on PR
      # https://github.com/sigstore/cosign-installer
      - name: Install cosign
        if: github.event_name != 'pull_request'
        uses: sigstore/cosign-installer@v3.8.2
        with:
          cosign-release: 'v2.5.0'

      # Workaround: https://github.com/docker/build-push-action/issues/461
      - name: Setup Docker buildx
        uses: docker/setup-buildx-action@v3.10.0

      # Login against a Docker registry except on PR
      # https://github.com/docker/login-action
      - name: Log into registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3.4.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5.7.0
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          labels: |
            org.opencontainers.image.description=Templates API service
            org.opencontainers.image.licenses=MIT
            org.opencontainers.image.title=templates-api
            org.opencontainers.image.url=https://github.com/ideaconsult/templates-api/blob/main/README.md
            org.opencontainers.image.vendor=IDEAconsult
          tags: |
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/develop' }}
            type=raw,value=stable,enable=${{ github.ref == 'refs/heads/main' }}
            type=ref,event=branch
            type=ref,event=tag
            type=ref,event=pr

      # Build and push Docker image with Buildx (don't push on PR)
      # https://github.com/docker/build-push-action
      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@v6.18.0
        with:
          build-args: |
            py_version=${{ env.PY_DEFAULT }}
            uv_version=${{ env.UV_VERSION }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          context: .
          labels: ${{ steps.meta.outputs.labels }}
          outputs: type=docker,dest=templates-api.tar
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}

      - name: Upload the built image as artifact for download
        uses: actions/upload-artifact@v4.6.2
        with:
          name: templates-api.tar
          path: templates-api.tar

      # Sign the resulting Docker image digest except on PRs.
      # This will only write to the public Rekor transparency log when the Docker
      # repository is public to avoid leaking data.  If you would like to publish
      # transparency data even for private images, pass --force to cosign below.
      # https://github.com/sigstore/cosign
      - name: Sign the published Docker image
        if: github.event_name != 'pull_request'
        env:
          # https://docs.github.com/en/actions/security-guides/security-hardening-for-github-actions#using-an-intermediate-environment-variable
          TAGS: ${{ steps.meta.outputs.tags }}
          DIGEST: ${{ steps.build-and-push.outputs.digest }}
        # This step uses the identity token to provision an ephemeral certificate
        # against the sigstore community Fulcio instance.
        run: echo "${TAGS}" | xargs -I {} cosign sign --yes {}@${DIGEST}
